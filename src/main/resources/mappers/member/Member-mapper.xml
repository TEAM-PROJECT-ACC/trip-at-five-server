<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mamberMapper">

	<select id="emailDuplication" resultType="int">

		select count(*) as
		emailCount
		from member_tb
		where mem_email_id = #{email}
	</select>


	<select id="nickNameDuplicationCheck" resultType="int">

		select count(*)
		as nickCount
		from member_tb
		where mem_nick = #{nickName}
	</select>

	<select id="loginInfo" resultType="MemberVO">

		select * from member_tb
		left join member_level_tb on mem_no = mem_sq
		where
		mem_email_id = #{email}


	</select>

	<select id="adminInfo" resultType="AdminVO">

		select * from admin_tb where
		admin_email_id = #{email}

	</select>

	<insert id="registerSend">

		insert into member_tb
		(MEM_SQ, MEM_EMAIL_ID, MEM_PWD,
		MEM_NICK, MEM_PHONE
		, MEM_ADDR, MEM_REG_DT)
		values (mem_seq.nextval,
		#{email}, #{pwd}, #{nickName}, #{tel}, #{address}
		, sysdate)
	</insert>

	<insert id="snsRegister">

		insert into member_tb (mem_sq, mem_email_id, mem_pwd,
		mem_nick,
		MEM_SOC_UID,
		CK_SOC_PLT) values (
		mem_seq.nextval, #{email},
		#{pwd}, #{nickName}, #{snsUid} ,
		#{platformName}
		)
	</insert>

	<!-- 비밀번호 재설정 -->

	<update id="updatePwd">

		update member_tb set mem_pwd = #{pwd}
		where
		mem_email_id = #{email}

	</update>

	<!-- 마이페이지 부분 -->

	<update id="infoUpdate">
		UPDATE member_tb
		<trim prefix="SET" suffixOverrides=",">
			<if test="pwd != null and pwd.length() > 0">mem_pwd = #{pwd},</if>
			<if test="nickName != null and nickName.length() > 0">mem_nick =
				#{nickName},</if>
		</trim>
		WHERE mem_email_id = #{email}
	</update>

	<update id="userInactive">
		update member_tb
		set CK_MEM_ST = 'INACTIVE',
		MEM_INACTIVE_DT = sysdate
		where MEM_EMAIL_ID = #{memEmailId}

	</update>

	<select id="getChallengeList" resultType="ChallengeVO">
		select * from
		challenge_tb
	</select>

	<select id="getChallengeCountNo" resultType="int">
		select CHAL_SQ from
		challenge_tb
	</select>


	<select id="getChallengeUserList"
		resultType="com.kh.clock.member.repository.ChallengHistoryDTO">
		select
		coupon_name as rewardCouponName ,
		chal_name,
		cmht.CHAL_NO as chalHistoryNo ,
		chal_cond,
		chal_hx_val as currentStep
		from challenge_member_history_tb cmht
		join challenge_tb ct on
		cmht.chal_no = ct.chal_sq
		join coupon_tb cp on cp.coupon_sq =
		ct.coupon_no
		where
		mem_no
		=
		#{memNo}
	</select>


	<insert id="insertUserChallengeList"
		parameterType="java.util.List">
		INSERT INTO challenge_member_history_tb
		( CHAL_HX_SQ, CHAL_HX_VAL,
		CHAL_NO, MEM_NO ) SELECT
		chal_history_seq.nextval, A.* FROM (
		<foreach collection="list" item="chal" separator=" UNION ALL ">
			SELECT
			0 AS
			CHAL_HX_VAL,
			#{chal.chalTotalCountNo} AS CHAL_NO,
			#{chal.memNo} AS
			MEM_NO
			FROM DUAL
		</foreach>
		) A
	</insert>


	<insert id="memberLevelSetting">

		insert into member_level_tb(mem_no) values (
		#{memSq})
	</insert>

	<insert id="challengeSucces">

		insert into challenge_completed_tb
		values(chal_history_seq.nextval,
		'UNUSED', sysdate,
		#{memSq},
		#{chalHistoryNo}
		)
	</insert>

	<select id="couponSelect"
		resultType="com.kh.clock.member.repository.CouponDTO">
		select
		coupon_name,
		coupon_price,
		chal_completed_dt as
		couponRegDt
		from challenge_completed_tb
		join
		challenge_tb on chal_no =
		chal_sq
		join coupon_tb on coupon_no =
		coupon_sq
		where mem_no =
		#{userMemSq}
	</select>


</mapper>